[build-system]
requires = ["setuptools>=76.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ElderCareVision"
description = "AI-Powered Fall Detection for Seniors"
keywords = ["elder", "care", "vision", "fall", "detection"]
readme = "README.md"
requires-python = ">=3.12.2"
version = "0.0.1"
dynamic = ["dependencies"]

[[project.authors]]
name = "Wojciech Czaplejewicz"
email = "wojciech.czaplejewicz@s3connectedhealth.com"

[[project.authors]]
name = "Mateusz Paczyński"
email = "mateusz.paczynski@s3connectedhealth.com"

[[project.authors]]
name = "Tomasz Bobowski"
email = "tomasz.bobowski@s3connectedhealth.com"

[[project.authors]]
name = "Damian Barański"
email = "damian.baranski@s3connectedhealth.com"

[project.urls]
Repository = "https://github.com/yazon/ElderCareVision"
Documentation = "https://github.com/yazon/ElderCareVision/README.md"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["logs", "include", "static"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[project.optional-dependencies]
dev = ["ruff==0.11.6", "mdformat==0.7.22", "pre-commit==4.2.0"]
test = ["pytest==8.3.4", "pytest-cov==4.1.0"]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
pythonpath = ["src"]
testpaths = ["tests"]
norecursedirs = ["build", "venv", ".venv"]
markers = [
    "integration: integration tests"
]

[tool.ruff]
lint.select = ["ALL"]
line-length = 120
target-version = "py312"
src = ["src"]
extend-exclude = [".venv", "venv", "build", "dist"]
lint.ignore = [
    "COM812",  # Clashes with ruff formatter
    "BLE001",  # Allow blind Exception catch
    "G004",    # Allows using f-strings in logging statements
    "D100",    # Allow no module docstring
    "D101",    # Allow no class docstring
    "D102",    # Allow no function docstring
    "D103",    # Allow no module docstring
    "D104",    # Allow no public package docstring
    "D105",    # Allow no method docstring
    "D106",    # Allow no class docstring
    "D107",    # Allow no docstring in __init__
    "D203",    # Mutually exclusive with D211
    "D212",    # Mutually exclusive with D213
    "D401",    # Allow non-imperative mood
    "D413",    # Allow no blank lines after lasts ection
    "FIX",     # Allow TODO comments
    "FBT",     # Allow boolean positional arguments
    "PLR2004", # Allow magic values
    "T201",    # Allow print statements
    "PERF401", # Allow using asyncio.run()
    "ERA001",  # Allow commented out code
    "E501",    # Allow long lines
    "EM101",   # Allow string literals in exceptions
]

[tool.ruff.format]
preview = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]  # Allow assert in tests
"**/__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files

[tool.ruff.lint.mccabe]
max-complexity = 18  # Set maximum cyclomatic complexity

[tool.ruff.lint.pylint]
max-returns = 12
max-args = 16
max-branches = 16
